# –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π file message_parsers.py
import re
import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List, Pattern

logger = logging.getLogger(__name__)

class MessageParser(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    @abstractmethod
    def can_parse(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
        Args:
            text: –¢–µ–∫—Å—Ç messages
            
        Returns:
            True, –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç, –∏–Ω–∞—á–µ False
        """
        pass
    
    @abstractmethod
    def parse(self, text: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç messages.
        
        Args:
            text: –¢–µ–∫—Å—Ç messages
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        pass
    
    @abstractmethod
    def format(self, data: Dict[str, Any]) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
        
        Args:
            data: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        """
        pass

class RayCyanBotParser(MessageParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ray_cyan_bot."""
    
    def __init__(self):
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.buy_pattern = re.compile(r'BUY ([^\s\(\)]+)')
        self.solscan_pattern = re.compile(r'https://solscan.io/account/([a-zA-Z0-9]{32,})')
        self.swap_pattern = re.compile(r'^(\s*[a-zA-Z0-9]+\S+)\s+swapped')
        self.address_pattern = re.compile(r'([a-zA-Z0-9]{40,})')
    
    def can_parse(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å message ray_cyan_bot.
        
        Args:
            text: –¢–µ–∫—Å—Ç messages
            
        Returns:
            True, –µ—Å–ª–∏ —ç—Ç–æ message –æ—Ç ray_cyan_bot, –∏–Ω–∞—á–µ False
        """
        return "BUY" in text
    
    def parse(self, text: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç message ray_cyan_bot.
        
        Args:
            text: –¢–µ–∫—Å—Ç messages
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            # Checking, —á—Ç–æ —ç—Ç–æ message –æ –ø–æ–∫—É–ø–∫–µ token
            if "BUY" not in text:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ token
            buy_match = self.buy_pattern.search(text)
            token_name = buy_match.group(1) if buy_match else "UNKNOWN"
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ —Ç–æ–∫–µ–Ω–µ –Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
            if token_name.endswith("]"):
                token_name = token_name[:-1]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            full_wallet = None
            
            # –ò—â–µ–º –≤ —Å—Å—ã–ª–∫–∞—Ö solscan
            solscan_match = self.solscan_pattern.search(text)
            
            if solscan_match:
                full_wallet = solscan_match.group(1)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ URL, –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ—à–µ–ª—å–∫–∞–º–∏
            if not full_wallet:
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "swapped"
                swap_lines = [line for line in text.split('\n') if "swapped" in line]
                
                if swap_lines:
                    for line in swap_lines:
                        # –ò—â–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å "swapped"
                        swap_match = self.swap_pattern.search(line)
                        
                        if swap_match:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–¥ "swapped"
                            wallet_prefix = swap_match.group(1).strip()
                            
                            # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç—Ç–æ–º—É –ø—Ä–µ—Ñ–∏–∫—Å—É
                            for potential_addr in self.address_pattern.findall(text):
                                if potential_addr.startswith(wallet_prefix[:5]):
                                    full_wallet = potential_addr
                                    break
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ª—é–±—É—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            if not full_wallet:
                # –ò—â–µ–º –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Ç–µ–∫—Å—Ç–∞
                for line in text.split('\n'):
                    wallet_matches = self.address_pattern.findall(line)
                    
                    for wallet in wallet_matches:
                        # Checking, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Contract (–Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞)
                        if wallet and line != text.split('\n')[-1]:
                            full_wallet = wallet
                            break
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            lines = text.split('\n')
            contract_address = ""
            
            # Checking –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            if lines and lines[-1].strip():
                last_line = lines[-1].strip()
                
                if re.match(r'^[a-zA-Z0-9]{30,}$', last_line) and (not full_wallet or full_wallet != last_line):
                    contract_address = last_line
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ, –∏—â–µ–º –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞
            if not contract_address:
                for line in text.split('\n'):
                    contract_matches = re.findall(r'([a-zA-Z0-9]{30,})', line)
                    
                    for contract in contract_matches:
                        if contract and (not full_wallet or full_wallet != contract):
                            contract_address = contract
                            break
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data
            return {
                'token_name': token_name,
                'wallet': full_wallet,
                'contract_address': contract_address
            }
            
        except Exception as e:
            logger.error(f"Error –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ messages ray_cyan_bot: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    def format(self, data: Dict[str, Any]) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
        
        Args:
            data: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        """
        try:
            if not data:
                return None
                
            token_name = data.get('token_name', 'UNKNOWN')
            wallet = data.get('wallet')
            contract_address = data.get('contract_address', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º message –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–º—É —à–∞–±–ª–æ–Ω—É
            formatted_text = f"""üü¢ BUY {token_name}"""
            
            # Adding —Å—Ç—Ä–æ–∫—É —Å –∫–æ—à–µ–ª—å–∫–æ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏
            if wallet:
                formatted_text += f"\nSmart money : {wallet}"
            
            # Adding –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –µ—Å–ª–∏ –Ω–∞—à–ª–∏
            if contract_address:
                formatted_text += f"\n{contract_address}"
            
            return formatted_text
            
        except Exception as e:
            logger.error(f"Error –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ray_cyan_bot: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None

class WhaleAlertParser(MessageParser):
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∫–∏—Ç–∞—Ö (Whale Alerts)."""
    
    def __init__(self):
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.whale_info_pattern = re.compile(r'(A .+? Whale just bought \$[\d.]+[KMB]? of .+?)(?=\(|\n|$)')
        self.mc_pattern = re.compile(r'\(MC:?\s*\$([\d.]+[KMB]?)\)')
        self.contract_pattern = re.compile(r'([A-Za-z0-9]{30,})')
    
    def can_parse(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å message –æ –∫–∏—Ç–µ.
        
        Args:
            text: –¢–µ–∫—Å—Ç messages
            
        Returns:
            True, –µ—Å–ª–∏ —ç—Ç–æ message –æ –∫–∏—Ç–µ, –∏–Ω–∞—á–µ False
        """
        return "New Token Whale Alert" in text and "just bought" in text and "just sold" not in text
    
    def parse(self, text: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç message –æ –∫–∏—Ç–µ.
        
        Args:
            text: –¢–µ–∫—Å—Ç messages
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            # Checking, —á—Ç–æ —ç—Ç–æ message –æ –ø–æ–∫—É–ø–∫–µ –∫–∏—Ç–∞
            if not ("New Token Whale Alert" in text and "just bought" in text and "just sold" not in text):
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∫–∏—Ç–∞
            whale_info_match = self.whale_info_pattern.search(text)
            whale_info = whale_info_match.group(1).strip() if whale_info_match else ""
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∏—Ç–µ, —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞—Å message
            if not whale_info:
                return None
            
            # Checking, –µ—Å—Ç—å –ª–∏ "just sold" –≤ —Ç–µ–∫—Å—Ç–µ messages (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è Check)
            if "just sold" in whale_info:
                return None
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–µ
            mc_match = self.mc_pattern.search(text)
            mc_info = mc_match.group(1) if mc_match else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            contract_match = self.contract_pattern.search(text)
            contract_address = contract_match.group(1) if contract_match else ""
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data
            return {
                'whale_info': whale_info,
                'market_cap': mc_info,
                'contract_address': contract_address
            }
            
        except Exception as e:
            logger.error(f"Error –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ messages –æ –∫–∏—Ç–µ: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None
    
    def format(self, data: Dict[str, Any]) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
        
        Args:
            data: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ data
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        """
        try:
            if not data:
                return None
                
            whale_info = data.get('whale_info', '')
            market_cap = data.get('market_cap', '')
            contract_address = data.get('contract_address', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ç –∫–∞–ø–µ
            mc_info = f"(MC: ${market_cap})" if market_cap else ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º message –ø–æ —Ç—Ä–µ–±—É–µ–º–æ–º—É —à–∞–±–ª–æ–Ω—É
            formatted_text = f"""New Token Whale Alert
üü¢ {whale_info} {mc_info}

{contract_address}"""
            
            return formatted_text
            
        except Exception as e:
            logger.error(f"Error –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∏—Ç–µ: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None

# –§–∞–±—Ä–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
class MessageParserFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    def __init__(self):
        self.parsers: List[MessageParser] = [
            RayCyanBotParser(),
            WhaleAlertParser()
        ]
    
    def get_parser(self, text: str) -> Optional[MessageParser]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ messages.
        
        Args:
            text: –¢–µ–∫—Å—Ç messages
            
        Returns:
            –ü–∞—Ä—Å–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        for parser in self.parsers:
            if parser.can_parse(text):
                return parser
        return None

# Creating –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–±—Ä–∏–∫–∏
parser_factory = MessageParserFactory()