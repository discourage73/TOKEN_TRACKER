from telethon import TelegramClient, events
import asyncio
import logging
import sys
import re
import json
import os
import time
import sqlite3
import signal
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
class UnicodeStreamHandler(logging.StreamHandler):
    def emit(self, record):
        try:
            msg = self.format(record)
            stream = self.stream
            stream.write(msg + self.terminator)
            self.flush()
        except UnicodeEncodeError:
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ '?'
            msg = self.format(record)
            try:
                stream = self.stream
                stream.write(msg.encode(stream.encoding, errors='replace').decode(stream.encoding) + self.terminator)
                self.flush()
            except (UnicodeError, IOError):
                self.handleError(record)
        except Exception:
            self.handleError(record)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = UnicodeStreamHandler(sys.stdout)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger = logging.getLogger(__name__)
logger.addHandler(console_handler)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def safe_str(text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if text is None:
        return "None"
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        return str(text[:100]).replace('\n', ' ') + "..."
    except:
        return "[–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã]"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import TELEGRAM_TOKEN, DEXSCREENER_API_URL, API_ID, API_HASH, TARGET_BOT

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ RadarDexBot
MIN_SIGNALS = 22  # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –º–∏–Ω–∏–º—É–º –≤ 20 –∫–∞–Ω–∞–ª–∞—Ö

def set_min_signals(new_value):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è MIN_SIGNALS –≤ —Ä–∞–Ω—Ç–∞–π–º–µ."""
    global MIN_SIGNALS
    MIN_SIGNALS = new_value
    logger.info(f"‚öôÔ∏è MIN_SIGNALS –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_value}")
    return MIN_SIGNALS

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–≥–æ–≤ –∏ —ç–º–æ–¥–∑–∏
TAG_EMOJI_MAP = {
    "snipeKOL": "üéØ",     # –¥–∞—Ä—Ç—Å
    "snipeGEM": "üíé",     # –±—Ä–∏–ª–ª–∏–∞–Ω—Ç
    "TG_KOL": "üçÄ",       # –∫–ª–µ–≤–µ—Ä
    "EarlyGEM": "üíé",     # –±—Ä–∏–ª–ª–∏–∞–Ω—Ç
    "EarlyKOL": "‚ö°",      # –º–æ–ª–Ω–∏—è
    "SmartMoney": "üíµ",   # –¥–æ–ª–ª–∞—Ä
    "Whale Bought": "üêã", # –∫–∏—Ç
    "Volume alert": "üöÄ", # —Ä–∞–∫–µ—Ç–∞
    "AlphAI_KOL": "üêÇ"    # –±—ã–∫
}

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (ID –∫–∞–Ω–∞–ª–∞ -> –∏–º—è)
SOURCE_CHANNELS = {
    2121262250: {"name": "@DoctoreDegens", "tag": "EarlyGEM"},
    2055101998: {"name": "@metagambler", "tag": "EarlyGEM"},
    1500214409: {"name": "@GemsmineEth", "tag": "TG_KOL"},
    1794471884: {"name": "@MineGems", "tag": "EarlyGEM"},
    1603469217: {"name": "@ZionGems", "tag": "EarlyGEM"},
    2366686880: {"name": "@Ranma_Calls_Solana", "tag": "EarlyGEM"},
    1818702441: {"name": "@michiosuzukiofsatoshicalls", "tag": "EarlyGEM"},
    1763265784: {"name": "@MarkDegens", "tag": "EarlyGEM"},
    2284638367: {"name": "@GemDynasty", "tag": "TG_KOL"},
    1554385364: {"name": "@SultanPlays", "tag": "TG_KOL"},
    1756488143: {"name": "@lowtaxsolana", "tag": "EarlyGEM"},
    1883929251: {"name": "@gogetagambles", "tag": "EarlyGEM"},
    2362597228: {"name": "@Parkergamblles", "tag": "EarlyGEM"},
    2696740432: {"name": "@cringemonke2", "tag": "SmartMoney"},
    2051055592: {"name": "@Mrbigbagcalls", "tag": "TG_KOL"},
    2299508637: {"name": "@BaddiesAi", "tag": "EarlyGEM"},
    2441888429: {"name": "@BasedchadsGamble", "tag": "BasedchadsGamble"},
    2514471362: {"name": "@cringemonke", "tag": "Whale Bought"},
    2030684366: {"name": "@uranusX100", "tag": "EarlyGEM"},
    2483474049: {"name": "@solhousesignal", "tag": "TG_KOL"},
    2093384030: {"name": "@solearlytrending", "tag": "TG_KOL"},
    2253840165: {"name": "@the_defi_investor", "tag": "EarlyGEM"},
    2307208059: {"name": "@MemesDontLies", "tag": "TG_KOL"},
    2314485533: {"name": "@kolsignal", "tag": "TG_KOL"},
    2441746747: {"name": "@DegenRaydiumSig", "tag": "TG_KOL"},
    2141713314: {"name": "@TheDegenBoysLounge", "tag": "TG_KOL"},
    #2318939340: {"name": "@SolanaXpertWallet", "tag": "SmartMoney"},
    2352003756: {"name": "@SolanaWhalesMarket", "tag": "Whale Bought"},
    1437584820: {"name": "@Pumpfunpremium", "tag": "TG_KOL"},
    2380594298: {"name": "@whaleBuyBotFree", "tag": "Whale Bought"},
    2249008099: {"name": "@SIGNALMEVX", "tag": "TG_KOL"},
    1700113598: {"name": "@KhronosAllChain", "tag": "TG_KOL"},
    #2305781763: {"name": "@mevxpfdexpaid", "tag": "TG_KOL"},
    2589360530: {"name": "@AveSignalMonitor", "tag": "TG_KOL"},
    2531914184: {"name": "@astrasolcalls", "tag": "TG_KOL"},
    1419575394: {"name": "@WizzyTrades", "tag": "TG_KOL"},
    1955928748: {"name": "@XAceCalls", "tag": "TG_KOL"},
    1845214884: {"name": "@TehPump_Calls", "tag": "TG_KOL"},
    2715551388: {"name": "@degenjamesai", "tag": "TG_KOL"},
    2521423800: {"name": "@RobinHood_Smarts", "tag": "TG_KOL"},
    1537838682: {"name": "@bruisersgambles", "tag": "TG_KOL"},
    2636521153: {"name": "@quaintsignals", "tag": "TG_KOL"},
    2020729829: {"name": "@shitcoingemsalert", "tag": "TG_KOL"},
    1523240618: {"name": "@mewgambles", "tag": "TG_KOL"},
    1998961899: {"name": "@gem_tools_calls", "tag": "TG_KOL"},
    2097131181: {"name": "@onchainalphatrench", "tag": "TG_KOL"},
    2439158541: {"name": "@PnutHiddenGems", "tag": "TG_KOL"},
    2250330423: {"name": "@Jessieewow", "tag": "EarlyGEM"},
    2216480403: {"name": "@solana_gold_miner", "tag": "TG_KOL"},
    2300385026: {"name": "@ChapoInsider", "tag": "EarlyGEM"},
    1758611100: {"name": "@mad_apes_gambles", "tag": "TG_KOL"},
    2536988241: {"name": "@AlphaONE_volumealerts", "tag": "Volume alert"},
    2534842510: {"name": "@AlphAI_signals_sol_en", "tag": "AlphAI_KOL"}
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤
channel_names_cache = {}

# –§–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
TRACKER_DB_PATH = "tokens_tracker_database.db" 

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤
tokens_db = {}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ ID
def get_channel_name(chat_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '-100'
    if str(chat_id).startswith('-100'):
        # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å ID –≤–∏–¥–∞ -1001234567890
        stripped_id = int(str(chat_id)[4:])  # –£–¥–∞–ª—è–µ–º -100 –∏–∑ –Ω–∞—á–∞–ª–∞
    else:
        stripped_id = chat_id
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
    channel_info = SOURCE_CHANNELS.get(stripped_id)
    if channel_info:
        if isinstance(channel_info, dict):
            return channel_info["name"]
        return channel_info
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ
        return f"@channel_{abs(stripped_id)}"

def get_channel_emojis_by_names(channel_names):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º."""
    emojis = ""
    for name in channel_names:
        # –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏
        for chat_id, info in SOURCE_CHANNELS.items():
            if isinstance(info, dict) and info["name"] == name:
                tag = info["tag"]
                emoji = TAG_EMOJI_MAP.get(tag, "üçÄ")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–µ–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                emojis += emoji
                break
            elif info == name:  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                emojis += "üçÄ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–µ–≤–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                break
    
    return emojis

def extract_solana_contracts(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Solana –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    if not text:
        return []
        
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Solana: –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –æ–±—ã—á–Ω–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±—É–∫–≤ –∏ –∏–º–µ—é—Ç 32-44 —Å–∏–º–≤–æ–ª–∞
    pattern = r"\b[a-zA-Z0-9]{32,44}\b"
    potential_contracts = re.findall(pattern, text)
    
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤
    filtered_contracts = []
    for contract in potential_contracts:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        contract_lower = contract.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if ('pump' in contract_lower or 
            'moon' in contract_lower or 
            'bonk' in contract_lower or
            re.match(r'^[0-9]', contract)):
            filtered_contracts.append(contract)
            continue
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:
        
        # 1. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        if re.match(r'^[A-Z]', contract) and len(re.findall(r'[A-Z]', contract)) >= 3:
            # –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏ –∏–º–µ–µ—Ç –Ω–µ –º–µ–Ω–µ–µ 3 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
            filtered_contracts.append(contract)
            continue
            
        # 2. –ò–º–µ–µ—Ç —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ (–º–∞–ª–µ–Ω—å–∫–∞—è-–±–æ–ª—å—à–∞—è –±—É–∫–≤–∞)
        if re.search(r'[a-z][A-Z][a-z]', contract) or re.search(r'[A-Z][a-z][A-Z]', contract):
            filtered_contracts.append(contract)
            continue
            
        # 3. –°–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ —Ü–∏—Ñ—Ä (–Ω–µ –º–µ–Ω–µ–µ 5) –∏ –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ (–Ω–µ –º–µ–Ω–µ–µ 5)
        digit_count = sum(c.isdigit() for c in contract)
        upper_count = sum(c.isupper() for c in contract)
        if digit_count >= 5 and upper_count >= 5:
            filtered_contracts.append(contract)
            continue
            
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if any(seq in contract for seq in ['Fg', 'Hc', 'Dk', 'CHL', 'GukM']):
            filtered_contracts.append(contract)
            continue
    
    return filtered_contracts

# SQLite —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤
def init_tracker_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤."""
    try:
        conn = sqlite3.connect(TRACKER_DB_PATH)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS tokens (
            contract TEXT PRIMARY KEY,
            channels TEXT DEFAULT '',
            channel_times TEXT DEFAULT '',
            channel_count INTEGER DEFAULT 0,
            first_seen TEXT NOT NULL,
            signal_reached_time TEXT DEFAULT NULL,
            time_to_threshold TEXT DEFAULT NULL,
            emojis TEXT DEFAULT '',
            updated_at TEXT,
            message_sent INTEGER DEFAULT 0,
            message_id INTEGER DEFAULT 0
        )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_tokens_channel_count 
        ON tokens(channel_count)
        ''')
        
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_tokens_first_seen 
        ON tokens(first_seen)
        ''')
        
        cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_tokens_message_sent 
        ON tokens(message_sent)
        ''')
        
        conn.commit()
        conn.close()
        logger.info("SQLite —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite –ë–î: {e}")

def save_tokens_to_db():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ tokens_db –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect(TRACKER_DB_PATH)
        cursor = conn.cursor()
        
        for contract, data in tokens_db.items():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tokens_db
            channels = ', '.join(data.get('channels', []))
            channel_count = data.get('channel_count', 0)
            first_seen = data.get('first_seen', '')
            signal_reached_time = data.get('signal_reached_time', None)
            time_to_threshold = data.get('time_to_threshold', None)
            message_sent = 1 if data.get('message_sent', False) else 0
            message_id = data.get('message_id', 0)
            emojis = data.get('emojis', '')
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º channel_times –≤ JSON —Å—Ç—Ä–æ–∫—É
            channel_times = json.dumps(data.get('channel_times', {}), ensure_ascii=False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è updated_at
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ token_info –∏ raw_api_data
            cursor.execute('SELECT token_info, raw_api_data FROM tokens WHERE contract = ?', (contract,))
            existing_data = cursor.fetchone()
            existing_token_info = existing_data[0] if existing_data else None
            existing_raw_api_data = existing_data[1] if existing_data else None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º INSERT OR REPLACE, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ token_info –∏ raw_api_data
            cursor.execute('''
            INSERT OR REPLACE INTO tokens 
            (contract, channels, channel_times, channel_count, first_seen, signal_reached_time, 
             time_to_threshold, message_sent, message_id, emojis, updated_at, token_info, raw_api_data)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (contract, channels, channel_times, channel_count, first_seen, signal_reached_time,
                  time_to_threshold, message_sent, message_id, emojis, current_time, 
                  existing_token_info, existing_raw_api_data))
        
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(tokens_db)} –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤ –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –≤ SQLite: {e}")
        import traceback
        logger.error(traceback.format_exc())

def load_tokens_from_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ tokens_db –∏–∑ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    global tokens_db
    try:
        if not os.path.exists(TRACKER_DB_PATH):
            logger.info("SQLite –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        conn = sqlite3.connect(TRACKER_DB_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM tokens')
        rows = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        column_names = [description[0] for description in cursor.description]
        
        for row in rows:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
            row_dict = dict(zip(column_names, row))
            contract = row_dict['contract']
            
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º channel_times –∏–∑ JSON
            channel_times = json.loads(row_dict['channel_times']) if row_dict['channel_times'] else {}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º channels –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
            channels = row_dict['channels'].split(', ') if row_dict['channels'] else []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            first_seen = row_dict['first_seen']
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø–æ–ª–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            if first_seen and len(first_seen) == 8:  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è HH:MM:SS
                current_date = datetime.now().strftime("%Y-%m-%d")
                first_seen = f"{current_date} {first_seen}"
            elif not first_seen:
                first_seen = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è tokens_db
            tokens_db[contract] = {
                'channels': channels,
                'channel_times': channel_times,
                'channel_count': row_dict['channel_count'],
                'first_seen': first_seen,
                'signal_reached_time': row_dict.get('signal_reached_time'),
                'time_to_threshold': row_dict.get('time_to_threshold'),
                'message_sent': bool(row_dict['message_sent']),
                'message_id': row_dict['message_id'],
                'emojis': row_dict['emojis']
            }
        
        conn.close()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tokens_db)} –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ SQLite: {e}")
        import traceback
        logger.error(traceback.format_exc())

TOKEN_LIFETIME_MINUTES = 2880  # —á–µ—Ä–µ–∑ 2 –¥–Ω—è —Ç–æ–∫–µ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã

def cleanup_old_tokens():
    global tokens_db
    try:
        logger.info("üßπ –ó–∞–ø—É—Å–∫ cleanup_old_tokens")
        current_time = datetime.now()
        cutoff_time = current_time - timedelta(minutes=TOKEN_LIFETIME_MINUTES)
        cutoff_time_str = cutoff_time.strftime("%Y-%m-%d %H:%M:%S")
        
        logger.info(f"‚è∞ –£–¥–∞–ª—è–µ–º Tokens —Å—Ç–∞—Ä—à–µ: {cutoff_time_str}")
        
        conn = sqlite3.connect(TRACKER_DB_PATH)
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º (—É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
        cursor.execute('SELECT COUNT(*) FROM tokens WHERE first_seen < ? AND message_sent = 0', 
                      (cutoff_time_str,))
        to_delete = cursor.fetchone()[0]
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {to_delete} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        cursor.execute('''
        DELETE FROM tokens 
        WHERE first_seen < ? 
        AND message_sent = 0
        ''', (cutoff_time_str,))
        
        deleted = cursor.rowcount
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –ù–ï —É–¥–∞–ª—è–µ–º)
        cursor.execute('SELECT COUNT(*) FROM tokens WHERE first_seen < ? AND message_sent = 1', 
                      (cutoff_time_str,))
        sent_tokens_count = cursor.fetchone()[0]
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info(f"üíå –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {sent_tokens_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è)")

        if deleted > 0:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ —Ç–æ–∂–µ
            cutoff_time_obj = current_time - timedelta(minutes=TOKEN_LIFETIME_MINUTES)
            
            tokens_to_remove = []
            for contract, data in tokens_db.items():
                try:
                    first_seen_str = data.get('first_seen', '')
                    if first_seen_str:
                        first_seen_obj = datetime.strptime(first_seen_str, "%Y-%m-%d %H:%M:%S")
                        channel_count = data.get('channel_count', 0)
                        
                        message_sent = data.get('message_sent', False)
                        if first_seen_obj < cutoff_time_obj and not message_sent:
                            tokens_to_remove.append(contract)
                except:
                    continue
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            for contract in tokens_to_remove:
                del tokens_db[contract]
            
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏: {len(tokens_to_remove)} —Ç–æ–∫–µ–Ω–æ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ cleanup_old_tokens: {e}")
        import traceback
        logger.error(traceback.format_exc())

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_database():
    global tokens_db
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLite –±–∞–∑—É –¥–ª—è –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤
        init_tracker_db()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï Tokens –∏–∑ SQLite
        load_tokens_from_db()
        
        # –ï—Å–ª–∏ tokens_db –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if not tokens_db:
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
            tokens_db = {}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        tokens_db = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def save_database():
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï Tokens –≤ SQLite
        save_tokens_to_db()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    # –Ø–≤–Ω—ã–π –≤—ã–≤–æ–¥ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
    init_tracker_db()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    load_database()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    client = TelegramClient(
        'test_session', 
        API_ID, 
        API_HASH,
        connection_retries=10,
        retry_delay=5,
        auto_reconnect=True,
        request_retries=10
    )
    
    await client.start()
    
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
      
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    @client.on(events.NewMessage(chats=list(SOURCE_CHANNELS.keys())))
    async def handler(event):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
            channel_name = get_channel_name(event.chat_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_name} (ID: {event.chat_id})")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = getattr(event.message, 'text', None)
            logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {safe_str(text)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã Solana –∏–∑ —Ç–µ–∫—Å—Ç–∞
            contracts = extract_solana_contracts(text)
            
            if contracts:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {contracts}")
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                
                for contract in contracts:
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Contract: {contract}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
                    if contract in tokens_db:
                        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                        if channel_name not in tokens_db[contract]["channels"]:
                            tokens_db[contract]["channels"].append(channel_name)
                            tokens_db[contract]["channel_times"][channel_name] = current_time
                            tokens_db[contract]["channel_count"] += 1
                            
                            logger.info(f"–¢–æ–∫–µ–Ω {contract} –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ. –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {tokens_db[contract]['channel_count']}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
                            emojis = get_channel_emojis_by_names(tokens_db[contract]["channels"])
                            tokens_db[contract]["emojis"] = emojis
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {contract}: {emojis}")
                                                        
                            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–±—Ä–∞–ª –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ RadarDexBot
                            
                            if tokens_db[contract]["channel_count"] >= MIN_SIGNALS and not tokens_db[contract]["message_sent"]:
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
                                first_seen_time = datetime.strptime(tokens_db[contract]["first_seen"], "%Y-%m-%d %H:%M:%S")
                                current_datetime = datetime.strptime(current_time, "%Y-%m-%d %H:%M:%S")
                                time_diff = current_datetime - first_seen_time
    
                                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –≤ –º–∏–Ω—É—Ç–∞—Ö
                                total_minutes = int(time_diff.total_seconds() / 60)
                                time_to_threshold = f"{total_minutes} min"
    
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
                                tokens_db[contract]["signal_reached_time"] = current_time
                                tokens_db[contract]["time_to_threshold"] = time_to_threshold
    
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å —ç–º–æ–¥–∑–∏ –≤ RadarDexBot
                                try:
                                    sent_message = await client.send_message(
                                        TARGET_BOT,
                                        f"Contract: {contract}\n{emojis} ({time_to_threshold})"  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û
                                    )
                                    tokens_db[contract]["message_sent"] = True
                                    tokens_db[contract]["message_id"] = sent_message.id
                                    tokens_db[contract]["emojis"] = emojis
                                    logger.info(f"–ù–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract} —Å —ç–º–æ–¥–∑–∏ {emojis} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É {TARGET_BOT}, ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.id}")
        
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            save_database()
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ç–æ–∫–µ–Ω–µ
                        tokens_db[contract] = {
                            "channels": [channel_name],
                            "channel_times": {channel_name: current_time},
                            "channel_count": 1,
                            "first_seen": current_time,
                            "signal_reached_time": None,
                            "time_to_threshold": None,
                            "message_sent": False,
                            "message_id": 0,
                            "emojis": ""
                        }
                        
                        logger.info(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω {contract} –¥–æ–±–∞–≤–ª–µ–Ω. –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤ 1 –∏–∑ {MIN_SIGNALS} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                        save_database()
            else:
                logger.info("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã Solana –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async def periodic_save():
        while True:
            try:
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º periodic_save cycle")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                save_database()
                logger.info("üíæ save_database() –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                cleanup_old_tokens()  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                logger.info("üßπ cleanup_old_tokens() –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    
            except Exception as e:
                logger.error(f"‚ùå Error in periodic_save: {e}")
                logger.error(traceback.format_exc())
                await asyncio.sleep(60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    asyncio.ensure_future(periodic_save())
    
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã: {len(SOURCE_CHANNELS)} —à—Ç. MIN_SIGNALS={MIN_SIGNALS}")
    
    # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        await client.run_until_disconnected()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"Error in –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        save_database()
        await client.disconnect()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
   # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
   def signal_handler(sig, frame):
       logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥...")
       print("\n[INFO] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
       sys.exit(0)
   
   # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
   signal.signal(signal.SIGINT, signal_handler)
   
   # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
   asyncio.run(main())