import sqlite3
import logging
from typing import List, Dict, Any, Optional, Tuple 

logger = logging.getLogger(__name__)

class UserDatabase:
    """table –≤ tokens_tracker_database.db"""
    
    def __init__(self, db_path: str = "tokens_tracker_database.db"):
        self.db_path = db_path
        self.init_users_table()
        self.init_potential_users_table()
        self.init_user_token_messages_table()
    
# table –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö users. –¢–µ –∫—Ç–æ –Ω–∞–∂–∞–ª–∏ —Å—Ç–∞—Ä—Ç ,–ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#    
    def init_potential_users_table(self):
        """Creates table –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("üîß –ù–ê–ß–ê–õ–û —Å–æ–∑–¥–∞–Ω–∏—è table potential_users")
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            logger.info("üîß –í—ã–ø–æ–ª–Ω—è—é CREATE TABLE...")
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS potential_users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE NOT NULL,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    first_contact TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("table potential_users —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"Error —Å–æ–∑–¥–∞–Ω–∏—è table potential_users: {e}")

    def add_potential_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO potential_users (user_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name))
            
            conn.commit()
            conn.close()
            logger.info(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π user {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"Error –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    def get_potential_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–æ—Ç–æ—Ä—ã–µ –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã)"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –µ—Å—Ç—å –≤ potential_users, –Ω–æ –ù–ï–¢ –≤ users (–∏–ª–∏ inactive)
            cursor.execute('''
                SELECT p.* FROM potential_users p
                LEFT JOIN users u ON p.user_id = u.user_id AND u.is_active = 1
                WHERE u.user_id IS NULL
                ORDER BY p.first_contact DESC
            ''')
            
            potential = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return potential
            
        except Exception as e:
            logger.error(f"Error –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def remove_potential_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM potential_users WHERE user_id = ?', (user_id,))
            conn.commit()
            
            rows_affected = cursor.rowcount
            conn.close()
            
            if rows_affected > 0:
                logger.info(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π user {user_id} —É–¥–∞–ª–µ–Ω")
                return True
            return False
            
        except Exception as e:
            logger.error(f"Error —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

# table users. –¢–µ –∫–æ–≥–æ –∫–æ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫—É –∏ —Ä–∞–±–æ—Ç–∞ —Å –Ω–∏–º–∏

    def init_users_table(self):
        """Creates table –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ tracker'–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Creating —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE NOT NULL,
                    username TEXT,
                    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active INTEGER DEFAULT 1
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("table –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∞ –≤ tokens_tracker_database.db")
            
        except Exception as e:
            logger.error(f"Error —Å–æ–∑–¥–∞–Ω–∏—è table –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    def is_user_authorized(self, user_id: int) -> bool:
        """Checks user authorization"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT is_active FROM users WHERE user_id = ? AND is_active = 1', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result is not None
        except Exception as e:
            logger.error(f"Error –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def add_user(self, user_id: int, username: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username)
                VALUES (?, ?)
            ''', (user_id, username))
            conn.commit()
            conn.close()
            logger.info(f"user {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"Error –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def remove_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ Checking, –µ—Å—Ç—å –ª–∏ user
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            existing_user = cursor.fetchone()
            
            if not existing_user:
                logger.warning(f"User {user_id} not found in database")
                conn.close()
                return False
            
            # Deleting –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
            conn.commit()
            
            # Checking, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ Success
            rows_affected = cursor.rowcount
            conn.close()
            
            if rows_affected > 0:
                logger.info(f"User {user_id} successfully removed")
                return True
            else:
                logger.warning(f"Failed to remove user {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"Error removing user {user_id}: {e}")
            return False

    def activate_user(self, user_id: int) -> bool:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Checking, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ user
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            if not cursor.fetchone():
                logger.warning(f"User {user_id} not found for activation")
                conn.close()
                return False
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('UPDATE users SET is_active = 1 WHERE user_id = ?', (user_id,))
            conn.commit()
            
            rows_affected = cursor.rowcount
            conn.close()
            
            if rows_affected > 0:
                logger.info(f"User {user_id} activated successfully")
                return True
            else:
                logger.warning(f"Failed to activate user {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"Error activating user {user_id}: {e}")
            return False

    def deactivate_user(self, user_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Checking, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ user
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            if not cursor.fetchone():
                logger.warning(f"User {user_id} not found for deactivation")
                conn.close()
                return False
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('UPDATE users SET is_active = 0 WHERE user_id = ?', (user_id,))
            conn.commit()
            
            rows_affected = cursor.rowcount
            conn.close()
            
            if rows_affected > 0:
                logger.info(f"User {user_id} deactivated successfully")
                return True
            else:
                logger.warning(f"Failed to deactivate user {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"Error deactivating user {user_id}: {e}")
            return False

    def update_user_status(self, user_id: int, is_active: bool) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)"""
        if is_active:
            return self.activate_user(user_id)
        else:
            return self.deactivate_user(user_id)

    def authorize_potential_user(self, user_id: int) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–∑ potential_users –≤ users)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ potential_users
            cursor.execute('SELECT username, first_name, last_name FROM potential_users WHERE user_id = ?', (user_id,))
            potential_user = cursor.fetchone()
            
            if not potential_user:
                logger.warning(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π user {user_id} not found")
                conn.close()
                return False
            
            username, first_name, last_name = potential_user
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ users
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, is_active, added_date)
                VALUES (?, ?, 1, datetime('now'))
            ''', (user_id, username))
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ potential_users
            cursor.execute('DELETE FROM potential_users WHERE user_id = ?', (user_id,))
            
            conn.commit()
            conn.close()
            
            logger.info(f"User {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"Error –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ user {user_id}: {e}")
            return False

    def get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users ORDER BY added_date DESC')
            users = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return users
        except Exception as e:
            logger.error(f"Error –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
        
# table user_token_messages_table. –ü—Ä–∏—Å–≤–æ–µ—â–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º id —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ reply —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ
    def init_user_token_messages_table(self):
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: Creates table –¥–ª—è —Å–≤—è–∑–∏ token-user-message"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
        
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_token_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    token_query TEXT NOT NULL,
                    user_id INTEGER NOT NULL,
                    token_message_id INTEGER,
                    growth_message_id INTEGER,
                    current_multiplier INTEGER DEFAULT 1,
                    token_sent_at TIMESTAMP DEFAULT (datetime('now', '+3 hours')),
                    growth_updated_at TIMESTAMP,
                    UNIQUE(token_query, user_id)
                )
            ''')
        
            # Creating –∏–Ω–¥–µ–∫—Å—ã
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_user_token_messages_token_user 
                ON user_token_messages(token_query, user_id)
            ''')
        
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_user_token_messages_user_id 
                ON user_token_messages(user_id)
            ''')
        
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_user_token_messages_token_sent_at 
                ON user_token_messages(token_sent_at)
            ''')
        
            conn.commit()
            conn.close()
            logger.info("table user_token_messages —Å–æ–∑–¥–∞–Ω–∞ Success")
        
        except Exception as e:
            logger.error(f"Error —Å–æ–∑–¥–∞–Ω–∏—è table user_token_messages: {e}")

    def save_user_token_message(self, token_query: str, user_id: int, message_id: int) -> bool:
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID messages –æ —Ç–æ–∫–µ–Ω–µ for user"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO user_token_messages 
                (token_query, user_id, token_message_id, token_sent_at)
                VALUES (?, ?, ?, datetime('now', '+3 hours'))
            ''', (token_query, user_id, message_id))
            
            conn.commit()
            conn.close()
            logger.info(f"saved message_id {message_id} for user {user_id}, token {token_query}")
            return True
            
        except Exception as e:
            logger.error(f"Error —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_token_message: {e}")
            return False

    def get_user_token_message(self, token_query: str, user_id: int) -> Optional[int]:
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç ID messages –æ —Ç–æ–∫–µ–Ω–µ for user"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT token_message_id FROM user_token_messages 
                WHERE token_query = ? AND user_id = ?
            ''', (token_query, user_id))
            
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else None
            
        except Exception as e:
            logger.error(f"Error –ø–æ–ª—É—á–µ–Ω–∏—è user_token_message: {e}")
            return None

    def update_user_growth_message(self, token_query: str, user_id: int, growth_message_id: int, multiplier: int) -> bool:
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç ID messages –æ —Ä–æ—Å—Ç–µ token"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE user_token_messages 
                SET growth_message_id = ?, current_multiplier = ?, growth_updated_at = datetime('now', '+3 hours')
                WHERE token_query = ? AND user_id = ?
            ''', (growth_message_id, multiplier, token_query, user_id))
            
            conn.commit()
            rows_affected = cursor.rowcount
            conn.close()
            return rows_affected > 0
            
        except Exception as e:
            logger.error(f"Error –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è user_growth_message: {e}")
            return False

    def get_user_growth_message(self, token_query: str, user_id: int) -> Optional[Tuple[int, int]]:
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ messages –æ —Ä–æ—Å—Ç–µ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT growth_message_id, current_multiplier 
                FROM user_token_messages 
                WHERE token_query = ? AND user_id = ?
            ''', (token_query, user_id))
            
            result = cursor.fetchone()
            conn.close()
            return result if result else None
            
        except Exception as e:
            logger.error(f"Error –ø–æ–ª—É—á–µ–Ω–∏—è user_growth_message: {e}")
            return None

    def get_all_users_for_token(self, token_query: str) -> List[Dict[str, Any]]:
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è token"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT utm.user_id, utm.token_message_id, utm.growth_message_id, 
                    utm.current_multiplier, u.username, u.is_active
                FROM user_token_messages utm
                LEFT JOIN users u ON utm.user_id = u.user_id
                WHERE utm.token_query = ? AND (u.is_active = 1 OR u.is_active IS NULL)
            ''', (token_query,))
            
            results = [dict(row) for row in cursor.fetchall()]
            conn.close()
            return results
            
        except Exception as e:
            logger.error(f"Error –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è token: {e}")
            return []

    def cleanup_old_user_messages(self, days_old: int = 14) -> int:
        """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                DELETE FROM user_token_messages 
                WHERE token_sent_at < datetime('now', '-' || ? || ' days')
            ''', (days_old,))
            
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            if deleted_count > 0:
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π user_token_messages")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"Error –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö user_token_messages: {e}")
            return 0
    
    def create_mcap_monitoring_table(self):
        """Creates table mcap_monitoring –≤ tracker DB"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS mcap_monitoring (
                contract TEXT PRIMARY KEY NOT NULL,
                initial_mcap REAL,
                curr_mcap REAL,
                updated_time TEXT DEFAULT (datetime('now', 'localtime')),
                ath_mcap REAL,
                ath_time TEXT,
                last_alert_multiplier REAL DEFAULT 1.0,
                is_active INTEGER DEFAULT 1,
                created_time TEXT DEFAULT (datetime('now', 'localtime')),
                signal_reached_time TEXT DEFAULT (datetime('now', 'localtime'))
            )
            ''')
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è: Adding –ø–æ–ª–µ is_active –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try:
                cursor.execute("PRAGMA table_info(mcap_monitoring)")
                columns = [column[1] for column in cursor.fetchall()]
                
                if 'is_active' not in columns:
                    logger.info("üîß –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ is_active –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É")
                    cursor.execute('ALTER TABLE mcap_monitoring ADD COLUMN is_active INTEGER DEFAULT 1')
                    
                    # Updating is_active –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
                    cursor.execute('''
                        UPDATE mcap_monitoring 
                        SET is_active = CASE 
                            WHEN curr_mcap >= 25000 THEN 1 
                            ELSE 0 
                        END
                    ''')
                    logger.info("‚úÖ –ü–æ–ª–µ is_active –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                
                if 'signal_reached_time' not in columns:
                    logger.info("üîß –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ signal_reached_time –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É")
                    cursor.execute('ALTER TABLE mcap_monitoring ADD COLUMN signal_reached_time TEXT DEFAULT (datetime("now", "localtime"))')
                    
                    # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º signal_reached_time = created_time
                    cursor.execute('''
                        UPDATE mcap_monitoring 
                        SET signal_reached_time = created_time 
                        WHERE signal_reached_time IS NULL
                    ''')
                    logger.info("‚úÖ –ü–æ–ª–µ signal_reached_time –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                    
            except Exception as migration_error:
                logger.warning(f"‚ö†Ô∏è Error –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π: {migration_error}")
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ table mcap_monitoring —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error —Å–æ–∑–¥–∞–Ω–∏—è table mcap_monitoring: {e}")
            return False
    
    def create_hotboard_table(self):
        """Creates table hotboard –≤ tracker DB"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS hotboard (
                contract TEXT PRIMARY KEY NOT NULL,
                ticker TEXT,
                initial_mcap REAL,
                initial_time TEXT DEFAULT (datetime('now', 'localtime')),
                ath_mcap REAL,
                ath_multiplier REAL,
                created_time TEXT DEFAULT (datetime('now', 'localtime'))
            )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ table hotboard —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error —Å–æ–∑–¥–∞–Ω–∏—è table hotboard: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
user_db = UserDatabase()