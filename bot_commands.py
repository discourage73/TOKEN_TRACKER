import logging
from typing import List, Optional
from telegram import Update, BotCommand
from telegram.ext import Application, ContextTypes
from telegram.constants import ParseMode

from config import CONTROL_ADMIN_IDS
from user_database import user_db
from utils import format_tokens_list

logger = logging.getLogger(__name__)

# ============================================================================
# –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
# ============================================================================

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in CONTROL_ADMIN_IDS

# ============================================================================
# –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ)
# ============================================================================

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    try:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        message = "üëë *admin panel*"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        keyboard = [
            [
                InlineKeyboardButton("üìä Tokens", callback_data="admin_tokens"),
                InlineKeyboardButton("üë• Users", callback_data="admin_users"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
        logger.info(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

async def adduser_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Add user: /adduser 123456789 @username (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    if not context.args:
        await update.message.reply_text("Usage: /adduser USER_ID [@username]")
        return
    
    try:
        target_user_id = int(context.args[0])
        username = context.args[1].replace('@', '') if len(context.args) > 1 else None
        
        if user_db.add_user(target_user_id, username):
            await update.message.reply_text(f"‚úÖ User {target_user_id} added!")
            logger.info(f"User {target_user_id} added by admin")
        else:
            await update.message.reply_text("‚ùå Error adding user")
    except ValueError:
        await update.message.reply_text("‚ùå User ID must be a number")
    except Exception as e:
        logger.error(f"Error adding user: {e}")
        await update.message.reply_text("‚ùå Error occurred")

async def removeuser_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Remove user: /removeuser 123456789 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    if not context.args:
        await update.message.reply_text("Usage: /removeuser USER_ID")
        return
    
    try:
        target_user_id = int(context.args[0])
        
        if user_db.remove_user(target_user_id):
            await update.message.reply_text(f"‚úÖ User {target_user_id} removed!")
            logger.info(f"User {target_user_id} removed by admin")
        else:
            await update.message.reply_text("‚ùå User not found")
    except ValueError:
        await update.message.reply_text("‚ùå User ID must be a number")
    except Exception as e:
        logger.error(f"Error removing user: {e}")
        await update.message.reply_text("‚ùå Error occurred")

# ============================================================================
# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
# ============================================================================

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /list - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    user_id = update.effective_user.id
    
    if not user_db.is_user_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        from token_service import get_monitored_tokens
        tokens_data = get_monitored_tokens()
        
        if not tokens_data:
            await update.message.reply_text(
                "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É—Å—Ç\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ (–ø–µ—Ä–≤—ã–µ 10 —Ç–æ–∫–µ–Ω–æ–≤)
        message, total_pages, current_page = format_tokens_list(tokens_data, page=0, tokens_per_page=10)
        
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /list: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")

# ============================================================================
# –ü–†–û–°–¢–û–ô CALLBACK –†–û–£–¢–ï–† (–±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏)
# ============================================================================

async def handle_callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(user_id):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    try:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        # –†–æ—É—Ç–∏–Ω–≥ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        if query.data == "admin_tokens":
            await show_tokens_menu(query, context)
        elif query.data == "admin_users": 
            await show_users_menu(query, context)
        elif query.data == "admin_back":
            await show_main_admin_panel(query, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω-–∫–æ–º–∞–Ω–¥
        elif query.data == "tokens_list":
            await handle_tokens_list(query, context)
        elif query.data == "tokens_clear":
            await handle_tokens_clear(query, context)
        elif query.data == "tokens_analytics":
            await handle_tokens_analytics(query, context)
        elif query.data == "tokens_stats":
            await handle_tokens_stats(query, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        elif query.data == "stats_daily":
            await handle_stats_period(query, context, days=1)
        elif query.data == "stats_weekly":
            await handle_stats_period(query, context, days=7)
        elif query.data == "stats_monthly":
            await handle_stats_period(query, context, days=30)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        elif query.data == "users_add":
            await handle_users_add(query, context)
        elif query.data == "users_remove":
            await handle_users_remove(query, context)
        elif query.data == "users_list":
            await handle_users_list(query, context)
        elif query.data == "users_toggle":
            await handle_users_toggle(query, context)
        elif query.data.startswith("activate_"):
            await handle_user_activate(query, context)
        elif query.data.startswith("deactivate_"):
            await handle_user_deactivate(query, context)
        elif query.data.startswith("authorize_"):
            await handle_authorize_user(query, context)
        elif query.data.startswith("remove_"):
            await handle_remove_user(query, context)
        elif query.data.startswith("confirm_remove_"):
            await handle_confirm_remove_user(query, context)
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback —Ä–æ—É—Ç–µ—Ä–µ: {str(e)}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_main_admin_panel(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    message = "üëë *admin panel*"
    keyboard = [
        [
            InlineKeyboardButton("üìä Tokens", callback_data="admin_tokens"),
            InlineKeyboardButton("üë• Users", callback_data="admin_users"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def show_tokens_menu(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ (–ø–æ–ª–Ω–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from token_service import get_monitored_tokens
    
    tokens = get_monitored_tokens()
    token_count = len(tokens) if tokens else 0
    
    message = f"üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏*\n\n–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {token_count}"
    
    keyboard = [
        [
            InlineKeyboardButton("üìã List", callback_data="tokens_list"),
            InlineKeyboardButton("üóëÔ∏è Clear", callback_data="tokens_clear"),
        ],
        [
            InlineKeyboardButton("üìä Analytics", callback_data="tokens_analytics"),
            InlineKeyboardButton("üìà Stats", callback_data="tokens_stats"),
        ],
        [
            InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_back")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def show_users_menu(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.""" 
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    all_users = user_db.get_all_users()
    active_users = [u for u in all_users if u.get('is_active')]
    
    message = f"üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—Å–µ–≥–æ: {len(all_users)}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}"
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="users_add"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="users_remove"),
        ],
        [
            InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫", callback_data="users_list"),
            InlineKeyboardButton("üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è", callback_data="users_toggle"),
        ],
        [
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–û–ú–ê–ù–î (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï)
# ============================================================================

async def handle_tokens_list(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤."""
    await query.answer("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
    message = "üìã *–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/list` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN)

async def handle_tokens_clear(query, context):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤."""
    await query.answer("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    message = "üóëÔ∏è *–û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤*\n\n–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN)

async def handle_tokens_analytics(query, context):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤."""
    await query.answer("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")
    message = "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤*\n\n–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º"
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN)

async def handle_tokens_stats(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    message = "üìà *Token Statistics*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
    
    keyboard = [
        [
            InlineKeyboardButton("üìÖ Daily", callback_data="stats_daily"),
            InlineKeyboardButton("üìä Weekly", callback_data="stats_weekly"),
        ],
        [
            InlineKeyboardButton("üìà Monthly", callback_data="stats_monthly"),
        ],
        [
            InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_tokens")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def handle_stats_period(query, context, days: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    try:
        period_name = "Daily" if days == 1 else "Weekly" if days == 7 else "Monthly"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await query.edit_message_text(
            f"üìä –§–æ—Ä–º–∏—Ä—É—é {period_name.lower()} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ {days} –¥–Ω...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        from token_service import send_token_stats
        await send_token_stats(context, days=days)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–Ω–æ–ø–∫–∞–º –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        await handle_tokens_stats(query, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {period_name.lower()} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ {period_name.lower()} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_users_add(query, context):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await query.answer("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    potential_users = user_db.get_potential_users()
    
    if potential_users:
        message = "‚ûï *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
        keyboard = []
        
        for i, user in enumerate(potential_users[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
            user_id = user.get('user_id')
            username = user.get('username', 'None')
            first_name = user.get('first_name', 'Unknown')
            
            message += f"`{user_id}` | @{username} | {first_name}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"‚úÖ {user_id} (@{username})", 
                    callback_data=f"authorize_{user_id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_users")])
    else:
        message = "üî≠ **–ù–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/adduser USER_ID [@username]`"
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_users")]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def handle_users_remove(query, context):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await query.answer("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    all_users = user_db.get_all_users()
    
    if all_users:
        message = "üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        keyboard = []
        
        for i, user in enumerate(all_users[:8]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
            user_id = user.get('user_id')
            username = user.get('username', 'N/A')
            status_icon = "‚úÖ" if user.get('is_active') else "‚ùå"
            
            message += f"{status_icon} `{user_id}` | @{username}\n"
            keyboard.append([
                InlineKeyboardButton(
                    f"üóëÔ∏è {status_icon} {user_id} (@{username})", 
                    callback_data=f"remove_{user_id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_users")])
    else:
        message = "üî≠ **–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è**"
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_users")]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def handle_users_list(query, context):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await query.answer("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    users = user_db.get_all_users()
    
    if users:
        message = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
        for i, user in enumerate(users[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user.get('is_active') else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            username = user.get('username') or 'N/A'
            added_date = user.get('added_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            message += f"{status} `{user['user_id']}` | @{username} | {added_date}\n"
        
        if len(users) > 10:
            message += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    else:
        message = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç*"
    
    keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_users")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def handle_users_toggle(query, context):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await query.answer("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º")
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    users = user_db.get_all_users()
    
    if users:
        message = "üîÑ *–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å:\n\n"
        keyboard = []
        
        for user in users[:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8
            user_id = user.get('user_id')
            username = user.get('username', 'N/A')
            is_active = user.get('is_active')
            
            if is_active:
                button_text = f"‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {user_id}"
                callback_data = f"deactivate_{user_id}"
            else:
                button_text = f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å {user_id}"
                callback_data = f"activate_{user_id}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_users")])
    else:
        message = "üî≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è Back", callback_data="admin_users")]]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def handle_user_activate(query, context):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(query.data.replace("activate_", ""))
    if user_db.update_user_status(user_id, is_active=True):
        await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    else:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await handle_users_toggle(query, context)

async def handle_user_deactivate(query, context):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.""" 
    user_id = int(query.data.replace("deactivate_", ""))
    if user_db.update_user_status(user_id, is_active=False):
        await query.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    else:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await handle_users_toggle(query, context)

async def handle_authorize_user(query, context):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(query.data.replace("authorize_", ""))
    if user_db.authorize_potential_user(user_id):
        await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    else:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await handle_users_add(query, context)

async def handle_remove_user(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(query.data.replace("remove_", ""))
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    message = f"üóëÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user_id}`?\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
    
    keyboard = [
        [
            InlineKeyboardButton("üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_remove")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

async def handle_confirm_remove_user(query, context):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(query.data.replace("confirm_remove_", ""))
    if user_db.remove_user(user_id):
        await query.answer(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
    else:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await handle_users_remove(query, context)

# ============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ê–ù–î –ë–û–¢–ê
# ============================================================================

async def setup_bot_commands(application: Application) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    try:
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("list", "–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤"),
            BotCommand("admin", "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
            BotCommand("adduser", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            BotCommand("removeuser", "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await application.bot.set_my_commands(commands)
        
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
        raise