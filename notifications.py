# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª notifications.py
import logging
import asyncio
import time
from typing import Dict, Any, List, Optional, Set
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from handlers.auth_middleware import user_required, admin_required
logger = logging.getLogger(__name__)

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
class NotificationManager:
    def __init__(self, batch_interval: int = 60):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            batch_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.batch_interval = batch_interval
        self.pending_notifications: Dict[int, List[Dict[str, Any]]] = {}  # chat_id -> notifications
        self.last_batch_time: Dict[int, float] = {}  # chat_id -> timestamp
        self.running_tasks: Set[asyncio.Task] = set()
        logger.info(f"–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {batch_interval} —Å–µ–∫—É–Ω–¥")
    
    def add_notification(self, chat_id: int, notification: Dict[str, Any]) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            notification: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        if chat_id not in self.pending_notifications:
            self.pending_notifications[chat_id] = []
        
        self.pending_notifications[chat_id].append(notification)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}, –≤—Å–µ–≥–æ: {len(self.pending_notifications[chat_id])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
        self._check_and_schedule_sending(chat_id)
    
    def _check_and_schedule_sending(self, chat_id: int) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        current_time = time.time()
        
        # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if any(task for task in self.running_tasks if getattr(task, 'chat_id', None) == chat_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        last_time = self.last_batch_time.get(chat_id, 0)
        
        if current_time - last_time >= self.batch_interval:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            task = asyncio.create_task(self._send_notifications_batch(chat_id))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            setattr(task, 'chat_id', chat_id)
            self.running_tasks.add(task)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            task.add_done_callback(self._task_done_callback)
    
    def _task_done_callback(self, task: asyncio.Task) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            task: –ó–∞–¥–∞—á–∞
        """
        self.running_tasks.discard(task)
    
    async def _send_notifications_batch(self, chat_id: int) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        try:
            from token_service import get_telegram_context
            context = get_telegram_context()
            
            if not context:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
            notifications = self.pending_notifications.get(chat_id, [])
            
            if not notifications:
                return
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.pending_notifications[chat_id] = []
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.last_batch_time[chat_id] = time.time()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_aggregate_message(notifications)
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(notifications)} –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
    
    def _format_aggregate_message(self, notifications: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            notifications: –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç
        if len(notifications) == 1:
            return notifications[0].get('text', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ {len(notifications)} —Ç–æ–∫–µ–Ω–∞–º:*\n\n"
        
        for i, notification in enumerate(notifications, start=1):
            notification_type = notification.get('type', 'update')
            token_name = notification.get('token_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            market_cap = notification.get('market_cap', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            multiplier = notification.get('multiplier', 1)
            
            if notification_type == 'growth':
                message += f"{i}. üî• *{token_name}* –≤—ã—Ä–æ—Å –≤ {multiplier}x! MC: {market_cap}\n"
            else:
                message += f"{i}. ‚ÑπÔ∏è *{token_name}*: MC: {market_cap}\n"
        
        return message

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = NotificationManager()

async def add_growth_notification(
    chat_id: int, 
    token_name: str, 
    multiplier: int, 
    market_cap: str,
    reply_to_message_id: Optional[int] = None,
    contract_address: Optional[str] = None
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ —Ç–æ–∫–µ–Ω–∞ –≤—Å–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º + –∞–¥–º–∏–Ω—É.
    """
    try:
        from token_service import get_telegram_context
        context = get_telegram_context()
        
        if not context:
            logger.error(f"Could not get Telegram context for growth notification")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–≥–æ–Ω—å–∫–∞–º–∏
        fire_emojis = "üî•" * min(multiplier, 10)
        growth_message = (
            f"{fire_emojis}\n"
            f"*{token_name}* *{multiplier}x* from call!\n\n"
            f"üí∞ Current Market Cap: {market_cap}"
        )
        
        # NEW: Get ALL recipients (admin + authorized users)
        from handlers.auth_middleware import get_user_db
        from config import CONTROL_ADMIN_IDS
        user_db = get_user_db()
        all_users = user_db.get_all_users()
        active_users = [user for user in all_users if user['is_active']]
        
        # Create list of all recipients
        recipients = []
        
        # Add admin (always receives notifications)
        for admin_id in CONTROL_ADMIN_IDS:
            recipients.append({'user_id': admin_id, 'username': 'admin'})
        
        # Add active users (excluding admin duplicate)
        for user in active_users:
            if user['user_id'] not in CONTROL_ADMIN_IDS:  # Avoid duplicate
                recipients.append(user)
        
        if not recipients:
            logger.warning("No recipients for growth notification")
            return
        
        sent_count = 0
        failed_count = 0
        
        # Send notification to ALL recipients
        for user in recipients:
            try:
                # For admin - send as reply to original token message if available
                if user['user_id'] in CONTROL_ADMIN_IDS and reply_to_message_id:
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=growth_message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_to_message_id=reply_to_message_id
                    )
                else:
                    # For other users - send as regular message
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=growth_message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                sent_count += 1
                
            except Exception as e:
                logger.error(f"Error sending growth notification to user {user['user_id']}: {str(e)}")
                failed_count += 1
        
        logger.info(f"Growth notification for token {token_name} to x{multiplier}: sent {sent_count}, failed {failed_count}")
            
    except Exception as e:
        logger.error(f"Error sending growth notification for token {token_name}: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def add_growth_notification_sync(
    chat_id: int, 
    token_name: str, 
    multiplier: int, 
    market_cap: str,
    reply_to_message_id: Optional[int] = None
) -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è add_growth_notification –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –°–æ–∑–¥–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            asyncio.create_task(
                add_growth_notification(chat_id, token_name, multiplier, market_cap, reply_to_message_id)
            )
        else:
            # –ï—Å–ª–∏ —Ü–∏–∫–ª–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
            loop.run_until_complete(
                add_growth_notification(chat_id, token_name, multiplier, market_cap, reply_to_message_id)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())