# handlers/admin_commands.py
import logging
import asyncio
import time
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest

from handlers.auth_middleware import admin_required
from config import CONTROL_ADMIN_IDS

logger = logging.getLogger(__name__)

# –ö–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
_menu_cache = {}
_cache_timeout = 60  # —Å–µ–∫—É–Ω–¥

async def handle_admin_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è admin callback'–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç timeout'–æ–≤"""
    query = update.callback_query
    data = query.data
    
    try:
        # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –°–†–ê–ó–£, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
        await query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É callback'–∞
        if data == "admin_panel":
            await show_admin_panel(query, context)
        elif data == "admin_tokens":
            await show_tokens_menu(query, context)
        elif data == "admin_users":
            await show_users_menu(query, context)
        elif data == "admin_back":
            await show_main_panel(query, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω-–∫–æ–º–∞–Ω–¥
        elif data == "tokens_list":
            await handle_tokens_list(query, context)
        elif data == "tokens_clear":
            await handle_tokens_clear(query, context)
        elif data == "tokens_analytics":
            await handle_tokens_analytics(query, context)
        elif data == "tokens_stats":
            await handle_tokens_stats(query, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        elif data == "users_add":
            await handle_users_add(query, context)
        elif data == "users_remove":
            await handle_users_remove(query, context)
        elif data == "users_list":
            await handle_users_list(query, context)
        elif data == "users_toggle":
            await handle_users_toggle(query, context)
        elif data.startswith("activate_"):
            await handle_user_activate(query, context)
        elif data.startswith("deactivate_"):
            await handle_user_deactivate(query, context)
        elif data.startswith("authorize_"):
            await handle_authorize_user(query, context)
        elif data.startswith("remove_"):
            await handle_remove_user(query, context)
        elif data.startswith("confirm_remove_"):
            await handle_confirm_remove_user(query, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö callback'–æ–≤ –∏–∑ test_bot_commands
        else:
            await handle_legacy_callbacks(query, context, data)
            
    except BadRequest as e:
        error_msg = str(e)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram
        if "Message is not modified" in error_msg:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
            # –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ - —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –µ—â–µ –æ–¥–Ω—É –æ—à–∏–±–∫—É
            return
            
        elif "Query is too old" in error_msg:
            logger.warning(f"Timeout callback'–∞: {data}")
            # –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ - —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
            return
            
        else:
            logger.error(f"BadRequest –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {data}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–≤–µ–∂–∏–π
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass  # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {data}: {e}")
        import traceback
        logger.error(traceback.format_exc())


async def handle_legacy_callbacks(query, context, data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö callback'–æ–≤ –∏–∑ test_bot_commands"""
    try:
        from test_bot_commands import (
            handle_clear_cancel, handle_refresh_list, handle_delete_all_confirm,
            handle_delete_confirm, handle_delete_selective, handle_delete_token,
            handle_clear_return
        )
        
        # –°–æ–∑–¥–∞–µ–º fake update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        fake_update = create_fake_update(query)
        
        # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        if data == "clear_cancel":
            await handle_clear_cancel(fake_update, context)
        elif data == "refresh_list":
            await handle_refresh_list(fake_update, context)
        elif data == "delete_all_confirm":
            await handle_delete_all_confirm(fake_update, context)
        elif data == "delete_confirm":
            await handle_delete_confirm(fake_update, context)
        elif data == "delete_selective":
            await handle_delete_selective(fake_update, context)
        elif data.startswith("delete_token_"):
            await handle_delete_token(fake_update, context)
        elif data == "clear_return":
            await handle_clear_return(fake_update, context)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {data}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_legacy_callbacks –¥–ª—è {data}: {e}")


# === –ü–ê–ù–ï–õ–ò –ò –ú–ï–ù–Æ ===

@admin_required
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –≥–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    try:
        user = update.effective_user
        first_name = user.first_name or user.username or 'Admin'
        
        message = """üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""

        keyboard = [
            [
                InlineKeyboardButton("üìä –¢–æ–∫–µ–Ω—ã", callback_data="admin_tokens"),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message, 
            parse_mode=ParseMode.MARKDOWN, 
            reply_markup=reply_markup
        )
        
        logger.info(f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")


async def show_admin_panel(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    try:
        message = """üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""

        keyboard = [
            [
                InlineKeyboardButton("üìä –¢–æ–∫–µ–Ω—ã", callback_data="admin_tokens"),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if query.message.text != message:
            await query.edit_message_text(
                message, 
                parse_mode=ParseMode.MARKDOWN, 
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: {e}")


async def show_main_panel(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    await show_admin_panel(query, context)


# === –ú–ï–ù–Æ –¢–û–ö–ï–ù–û–í ===

async def show_tokens_menu(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏."""
    try:
        message = """üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏*

üìù *–î–µ–π—Å—Ç–≤–∏—è:*"""

        keyboard = [
            [
                InlineKeyboardButton("üìã List", callback_data="tokens_list"),
                InlineKeyboardButton("üóëÔ∏è Clear", callback_data="tokens_clear"),
            ],
            [
                InlineKeyboardButton("üìä Analytics", callback_data="tokens_analytics"),
                InlineKeyboardButton("üìà Stats", callback_data="tokens_stats"),
            ],
            [
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        current_text = query.message.text if query.message else ""
        if current_text != message:
            await query.edit_message_text(
                message, 
                parse_mode=ParseMode.MARKDOWN, 
                reply_markup=reply_markup
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é —Ç–æ–∫–µ–Ω–æ–≤: {e}")


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–û–ö–ï–ù-–ö–û–ú–ê–ù–î ===

async def handle_tokens_list(query, context):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é list_tokens —á–µ—Ä–µ–∑ callback —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç timeout."""
    try:
        # –°—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        
        from test_bot_commands import list_tokens
        
        # –°–æ–∑–¥–∞–µ–º fake update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        fake_update = type('Update', (), {
            'message': query.message, 
            'effective_user': query.from_user,
            'callback_query': query
        })()
        
        await list_tokens(fake_update, context)
        logger.info("–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ list_tokens: {e}")
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤")
        except:
            pass


async def handle_tokens_clear(query, context):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é clear_tokens —á–µ—Ä–µ–∑ callback —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç timeout."""
    try:
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        
        from test_bot_commands import clear_tokens
        
        # –°–æ–∑–¥–∞–µ–º fake update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        fake_update = type('Update', (), {
            'message': query.message,
            'effective_user': query.from_user,
            'callback_query': query
        })()
        
        await clear_tokens(fake_update, context)
        logger.info("–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ clear_tokens: {e}")
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏")
        except:
            pass


async def handle_tokens_analytics(query, context):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é analytics_command —á–µ—Ä–µ–∑ callback —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç timeout."""
    try:
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        
        from test_bot_commands import analytics_command
        
        # –°–æ–∑–¥–∞–µ–º fake update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        fake_update = type('Update', (), {
            'message': query.message,
            'effective_user': query.from_user,
            'callback_query': query
        })()
        
        await analytics_command(fake_update, context)
        logger.info("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ analytics_command: {e}")
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        except:
            pass


async def handle_tokens_stats(query, context):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é stats_command —á–µ—Ä–µ–∑ callback —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç timeout."""
    try:
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é stats –∏–∑ test_bot4.py
        from test_bot4 import stats_command
        
        # –°–æ–∑–¥–∞–µ–º fake update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        fake_update = type('Update', (), {
            'message': query.message,
            'effective_user': query.from_user,
            'callback_query': query
        })()
        
        await stats_command(fake_update, context)
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ stats_command: {e}")
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        except:
            pass


# === –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

async def show_users_menu(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        message, reply_markup = await get_users_menu_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        current_text = query.message.text if query.message else ""
        if current_text != message:
            await query.edit_message_text(
                message, 
                parse_mode=ParseMode.MARKDOWN, 
                reply_markup=reply_markup
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


async def get_users_menu_data() -> tuple[str, InlineKeyboardMarkup]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = "users_menu"
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (cache_key in _menu_cache and 
        current_time - _menu_cache[cache_key]["timestamp"] < _cache_timeout):
        logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        cached_data = _menu_cache[cache_key]
        return cached_data["message"], cached_data["markup"]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    logger.debug("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            from user_database import user_db
            all_users = user_db.get_all_users()
            active_count = len([u for u in all_users if u.get('is_active', False)])
            total_count = len(all_users)
        except:
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é
            active_count = 0
            total_count = 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}

üìù *–î–µ–π—Å—Ç–≤–∏—è:*"""

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="users_add"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="users_remove"),
            ],
            [
                InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data="users_list"),
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å", callback_data="users_toggle"),
            ],
            [
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        _menu_cache[cache_key] = {
            "message": message,
            "markup": reply_markup, 
            "timestamp": current_time
        }
        
        return message, reply_markup
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        error_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]])
        return error_message, error_markup


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ö–û–ú–ê–ù–î ===

async def handle_users_list(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç timeout."""
    try:
        logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
        
        from user_database import user_db
        all_users = user_db.get_all_users()
        
        if not all_users:
            message = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            message = f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* ({len(all_users)})\n\n"
            
            for i, user in enumerate(all_users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
                status = "‚úÖ" if user.get('is_active', False) else "‚ùå"
                username = user.get('username', '–ù–µ—Ç username')
                user_id = user.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message += f"{i}. {status} `{user_id}` @{username}\n"
            
            if len(all_users) > 20:
                message += f"\n... –∏ –µ—â–µ {len(all_users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message, 
            parse_mode=ParseMode.MARKDOWN, 
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except:
            pass


async def handle_users_add(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        from user_database import user_db
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        potential_users = user_db.get_potential_users()
        
        if potential_users:
            message = "üë• **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
            message += "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã:\n\n"
            
            keyboard = []
            for i, user in enumerate(potential_users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                username = user.get('username', '–ù–µ—Ç username')
                user_id = user.get('user_id')
                first_name = user.get('first_name', '')
                
                message += f"{i}. `{user_id}` - {first_name} (@{username})\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å {first_name}", 
                        callback_data=f"authorize_{user_id}"
                    )
                ])
            
            if len(potential_users) > 10:
                message += f"\n... –∏ –µ—â–µ {len(potential_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        else:
            message = "üë• **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            message += "‚ùå –ù–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
            message += "üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–∞–ø–∏—à—É—Ç –±–æ—Ç—É."
            keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message, 
            parse_mode=ParseMode.MARKDOWN, 
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_users_add: {e}")
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        except:
            pass


async def handle_authorize_user(query, context):
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID –∏–∑ callback data"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback data
        user_id = int(query.data.split("_")[1])
        
        from user_database import user_db
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_db.is_user_authorized(user_id):
            await query.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_db.add_user(user_id):
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö
            user_db.remove_potential_user(user_id)
            
            logger.info(f"–ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            global _menu_cache
            _menu_cache.clear()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await handle_users_add(query, context)
            
        else:
            try:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            except:
                pass
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_authorize_user: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        except:
            pass


async def handle_users_remove(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        from user_database import user_db
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = user_db.get_all_users()
        
        if all_users:
            active_users = [user for user in all_users if user['is_active']]
            inactive_users = [user for user in all_users if not user['is_active']]
            
            message = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            message += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
            message += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_users)}\n"
            message += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_users)}\n\n"
            message += "‚ö†Ô∏è **–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.**\n\n"
            
            keyboard = []
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if active_users:
                message += "**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
                for i, user in enumerate(active_users[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5
                    username = user.get('username', '–ù–µ—Ç username')
                    user_id = user.get('user_id')
                    first_name = user.get('first_name', '')
                    
                    message += f"{i}. `{user_id}` - {first_name} (@{username})\n"
                    
                    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üóë –£–¥–∞–ª–∏—Ç—å {first_name}", 
                            callback_data=f"remove_{user_id}"
                        )
                    ])
                
                if len(active_users) > 5:
                    message += f"... –∏ –µ—â–µ {len(active_users) - 5} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        else:
            message = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message, 
            parse_mode=ParseMode.MARKDOWN, 
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_users_remove: {e}")


async def handle_remove_user(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(query.data.split("_")[1])
        
        from user_database import user_db
        user_info = user_db.get_user_info(user_id)
        
        if not user_info:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        first_name = user_info.get('first_name', str(user_id))
        username = user_info.get('username', '–ù–µ—Ç username')
        
        message = f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ**\n\n"
        message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} (@{username})\n"
        message += f"ID: `{user_id}`\n\n"
        message += "‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_remove")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message, 
            parse_mode=ParseMode.MARKDOWN, 
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_remove_user: {e}")


async def handle_confirm_remove_user(query, context):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(query.data.split("_")[2])
        
        from user_database import user_db
        
        if user_db.remove_user(user_id):
            logger.info(f"–ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            global _menu_cache
            _menu_cache.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            await handle_users_remove(query, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_remove_user: {e}")


async def handle_users_toggle(query, context):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from user_database import user_db
        all_users = user_db.get_all_users()
        
        if not all_users:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        message = "üîÑ **–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**\n\n"
        
        keyboard = []
        for user in all_users[:8]:  # –ü–µ—Ä–≤—ã–µ 8 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_id = user.get('user_id')
            first_name = user.get('first_name', str(user_id))
            is_active = user.get('is_active', False)
            
            status = "‚úÖ" if is_active else "‚ùå"
            action = "deactivate" if is_active else "activate"
            action_text = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            
            message += f"{status} {first_name} (`{user_id}`)\n"
            
            keyboard.append([
                InlineKeyboardButton(
                    f"{action_text} {first_name}", 
                    callback_data=f"{action}_{user_id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message, 
            parse_mode=ParseMode.MARKDOWN, 
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_users_toggle: {e}")


async def handle_user_activate(query, context):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(query.data.split("_")[1])
        
        from user_database import user_db
        if user_db.set_user_active(user_id, True):
            logger.info(f"–ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            global _menu_cache
            _menu_cache.clear()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await handle_users_toggle(query, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_activate: {e}")


async def handle_user_deactivate(query, context):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(query.data.split("_")[1])
        
        from user_database import user_db
        if user_db.set_user_active(user_id, False):
            logger.info(f"–ê–¥–º–∏–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            global _menu_cache
            _menu_cache.clear()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await handle_users_toggle(query, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_deactivate: {e}")


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def clear_menu_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –º–µ–Ω—é (–¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
    global _menu_cache
    _menu_cache.clear()
    logger.info("–ö–µ—à –º–µ–Ω—é –æ—á–∏—â–µ–Ω")


def is_menu_cached(cache_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ"""
    return (cache_key in _menu_cache and 
            time.time() - _menu_cache[cache_key]["timestamp"] < _cache_timeout)


async def safe_edit_message(query, message: str, reply_markup=None, parse_mode=ParseMode.MARKDOWN):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        current_text = query.message.text if query.message else ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if current_text == message:
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ —Ç–µ–∫—É—â–µ–º—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            message, 
            parse_mode=parse_mode, 
            reply_markup=reply_markup
        )
        return True
        
    except BadRequest as e:
        if "Message is not modified" in str(e):
            logger.debug("Telegram –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–ª –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
        else:
            raise e


async def safe_answer_callback(query, text: str = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", show_alert: bool = False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π timeout'–æ–≤"""
    try:
        await query.answer(text, show_alert=show_alert)
        return True
    except BadRequest as e:
        if "Query is too old" in str(e):
            logger.warning("Callback query —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç")
            return False
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {e}")
            return False


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ö–û–î–û–ú ===

def create_fake_update(query, user=None):
    """–°–æ–∑–¥–∞–µ—Ç fake update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    if user is None:
        user = query.from_user
        
    return type('Update', (), {
        'message': query.message,
        'effective_user': user,
        'callback_query': query
    })()


async def call_legacy_function(func, query, context, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ test_bot_commands —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –°–æ–∑–¥–∞–µ–º fake update
        fake_update = create_fake_update(query)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        await func(fake_update, context, *args, **kwargs)
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ legacy —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
        return False


# === –û–¢–õ–ê–î–û–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_cache_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    info = {
        "cache_size": len(_menu_cache),
        "cache_keys": list(_menu_cache.keys()),
        "cache_timeout": _cache_timeout
    }
    
    for key, data in _menu_cache.items():
        age = time.time() - data["timestamp"]
        info[f"{key}_age"] = f"{age:.1f}s"
    
    return info


def log_cache_stats():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞"""
    cache_info = get_cache_info()
    logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {cache_info}")


# === –≠–ö–°–ü–û–†–¢ –û–°–ù–û–í–ù–´–• –§–£–ù–ö–¶–ò–ô ===

__all__ = [
    'admin_panel',
    'handle_admin_callbacks', 
    'show_admin_panel',
    'show_tokens_menu',
    'show_users_menu',
    'clear_menu_cache',
    'get_cache_info'
]